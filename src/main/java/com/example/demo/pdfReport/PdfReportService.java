package com.example.demo.pdfReport;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.example.demo.dto.UserDto;
import com.example.demo.exception.CustomException;
import com.example.demo.service.IUserService;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

@Component
public class PdfReportService {
	@Autowired
	private IUserService userService;
	
	// private static String FILE = "FirstPdf.pdf";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	// private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.HELVETICA, 5, Font.NORMAL);

	public static ByteArrayInputStream generatePdfReportForAdmin(List<UserDto> userDtoList, List<UserDto> userDtoListFromDatabase) throws FileNotFoundException, DocumentException {
		Document document = new Document();
		ByteArrayOutputStream out = new ByteArrayOutputStream();

		PdfWriter.getInstance(document, out);
		
		document.open();
		addTitlePage(document);
		createTableForAdmin(document, userDtoList, userDtoListFromDatabase);
		document.close();
		// return new FileInputStream();
		return new ByteArrayInputStream(out.toByteArray());
	}
	
	public static ByteArrayInputStream generatePdfReportForUser(List<UserDto> userDtoList) throws FileNotFoundException, DocumentException {
		Document document = new Document();
		ByteArrayOutputStream out = new ByteArrayOutputStream();

		PdfWriter.getInstance(document, out);
		
		document.open();
		addTitlePage(document);
		createTableForUser(document, userDtoList);
		document.close();
		// return new FileInputStream();
		return new ByteArrayInputStream(out.toByteArray());
	}
	

	private static void addTitlePage(Document document) throws DocumentException {
		Paragraph paragraph = new Paragraph();
		
		//addEmptyLine(paragraph, 1);
		
		paragraph.add(new Paragraph("Title of the document", redFont));
		paragraph.add(new Phrase("Report generated on : " + new Date(), smallBold));
		//paragraph.add( Chunk.NEWLINE );
		addEmptyLine(paragraph, 2);
//		addEmptyLine(paragraph, 1);
//
//		// Will create: Report generated by: _name, _date
//		paragraph.add(new Paragraph("Report generated on : " + new Date(), smallBold));
//
//		addEmptyLine(paragraph, 3);
//
//		paragraph.add(new Paragraph("This document describes something which is very important ", smallBold));
//
//		addEmptyLine(paragraph, 8);
//
//		paragraph.add(new Paragraph("This document is a preliminary version and not subject to your license "
//				+ "agreement or any other agreement with vogella.com ;-).", redFont));

		document.add(paragraph);
	}
	
	public List<UserDto> getAll() throws CustomException {
		return userService.displayAllUsers();
	}

	private static void createTableForAdmin(Document document, List<UserDto> userDtoList, List<UserDto> userDtoListFromDatabase) throws DocumentException {
		Paragraph paragraph1 = new Paragraph();
		
		PdfPTable table1 = new PdfPTable(1);
		table1.setWidthPercentage(100);
		
		String line1 = "UserId" + "\n";                     
		String line2= userDtoList.get(0).getEmail() + "\n";
		addEmptyLine(paragraph1, 1);
		
		Paragraph p1 = new Paragraph();
		
		Phrase ph1 = new Phrase(line1, smallBold);
		Phrase ph2 = new Phrase(line2, catFont);
		
		p1.add(ph1);
		p1.add(ph2);
		
		PdfPCell cell1 = new PdfPCell(p1);
		cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
		table1.addCell(cell1);
		paragraph1.add(table1);
		
		addEmptyLine(paragraph1, 1);
		
		Paragraph paragraph2 = new Paragraph();
		
		PdfPTable table2 = new PdfPTable(3);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);
		/*List<UserDto> userDtoListFromUserService = new ArrayList<>();
		userDtoListFromUserService = getAll();*/
		
		PdfPCell c1 = new PdfPCell(new Phrase("UserId"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table2.addCell(c1);

		c1 = new PdfPCell(new Phrase("Name"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table2.addCell(c1);

		c1 = new PdfPCell(new Phrase("Phone Number"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table2.addCell(c1);
		table2.setHeaderRows(1);
		
		for (int i = 0; i < userDtoListFromDatabase.size(); i++){
			table2.addCell(userDtoListFromDatabase.get(i).getName());
			table2.addCell(userDtoListFromDatabase.get(i).getEmail());
			table2.addCell(userDtoListFromDatabase.get(i).getPhoneNumber());
         }
		paragraph2.add(table2);
//		table.addCell("1.0");
//		table.addCell("1.1");
//		table.addCell("1.2");
//		table.addCell("2.1");
//		table.addCell("2.2");
//		table.addCell("2.3");
		
		//subCatPart.add(table);
		document.add(paragraph1);
		document.add(paragraph2);
	}
	
	private static void createTableForUser(Document document, List<UserDto> userDtoList) throws DocumentException {
		Paragraph paragraph = new Paragraph();
		
		PdfPTable table1 = new PdfPTable(2);
		table1.setWidthPercentage(100);
		
		Paragraph p1 = new Paragraph();
		
		String line1 = "UserId" + "\n";                     
		String line2 = userDtoList.get(0).getEmail() + "\n";
		
		Phrase ph1 = new Phrase(line1, smallBold);
		Phrase ph2 = new Phrase(line2, catFont);
		
		p1.add(ph1);
		p1.add(ph2);
		
		PdfPCell cell1 = new PdfPCell(p1);
		cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
		table1.addCell(cell1);
		
		Paragraph p2 = new Paragraph();
		
		String line3 = "Phone Number" + "\n";                     
		String line4 = userDtoList.get(0).getPhoneNumber() + "\n";
		
		Phrase ph3 = new Phrase(line3, smallBold);
		Phrase ph4 = new Phrase(line4, catFont);
		
		p2.add(ph3);
		p2.add(ph4);
		
		cell1 = new PdfPCell(p2);
		cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
		table1.addCell(cell1);
		//addEmptyLine(paragraph, 1);
		
		//subCatPart.add(table);
		document.add(table1);
		addEmptyLine(paragraph, 1);
		}
	
	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
	
	/*
	 * public String generatePdfReport() throws FileNotFoundException,
	 * DocumentException { Document document = new Document();
	 * PdfWriter.getInstance(document, new
	 * FileOutputStream("iTextHelloWorld.pdf"));
	 * 
	 * 
	 * Font font = FontFactory.getFont(FontFactory.COURIER, 16,
	 * BaseColor.BLACK); Chunk chunk = new Chunk("Hello World", font);
	 * 
	 * document.add(chunk); document.close(); return "generated"; }
	 */

}
